
attribute vec4 vPosition; 
uniform vec3 translate;
uniform vec3 scale;
uniform vec4 rotation;
uniform float noiseSpeed;
uniform float time_0_X;
uniform float wavefreq;

varying vec3 pos;
varying vec3 N;
varying vec2 vTexCoord;
varying vec3 v;

uniform vec4 view_position;

varying vec3 vNormal;
varying vec3 vViewVec;

// Sample offsets to generate the normal
const vec2 offY = vec2(0.0, 0.1);
const vec2 offZ = vec2(0.1, 0.0);

// 2 * pi
const float PI2 = 6.2831853;

void main()
{
    pos = vec3(gl_Vertex);

	
    //vec2 uv = tc + (p/len)*cos(len*12.0-wavefreq*4.0)*0.03;
	//pos.y = uv.x;
	//pos.y = sin((pos.x/pos.x)*wavefreq+(pos.z*pos.z));
	
	// Swing the pulse at a certain frequency
   //float pulse = sin(0.1 * PI2 * time_0_X);
   //float d = length(pos.yz + offY);
   //float x2 = pulse * sqrt(80.0-d);
   //pos.y = x2;
	
    N = normalize(gl_NormalMatrix * gl_Normal);
	
	float angle = radians(rotation[0]);
	vec3 axis = normalize(rotation.yzw);
	
	mat3 I = mat3(1.0);
	mat3 S = mat3(      0, -axis.z,  axis.y,
	               axis.z,       0, -axis.x,
                  -axis.y,  axis.x,       0);
	mat3 uuT = outerProduct(axis, axis);
	mat3 rot = uuT + cos(angle)*(I - uuT) + sin(angle)*S;	

	pos *= scale;	
	pos *= rot;
    pos += translate;
	
	vTexCoord   =  gl_MultiTexCoord0.xy;
	//vTexCoord   = pos.xyz * scale.xyz;
	
	v = vec3(gl_ModelViewMatrix * vec4(pos,1.0));       

   vViewVec    = pos.xyz - view_position.xyz;
   vViewVec.z *=1.0;
   vNormal     = gl_Normal;   

		vec2 tc = pos.xz;
    vec2 p = -1.0 + 2.0 * tc;
    float len = length(p);

	//pos.y = sin(len*wavefreq)/2;
	pos.y = sin(pos.x*600.0+wavefreq);

	gl_Position =  gl_ModelViewProjectionMatrix * vec4(pos, 1);
	
	//vec4 temp = vec4( pos.xy, 0.0, 1.0 );
	//temp = sign( temp );
	
	//vTexCoord   = (vec2( temp.x, - temp.y ) + vec2( 1.0 ) ) / vec2( 2.0 ); 
}
